/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const RoutesLazyImport = createFileRoute('/routes')()
const DriversLazyImport = createFileRoute('/drivers')()
const CustomersLazyImport = createFileRoute('/customers')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const RoutesLazyRoute = RoutesLazyImport.update({
  path: '/routes',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/routes.lazy').then((d) => d.Route))

const DriversLazyRoute = DriversLazyImport.update({
  path: '/drivers',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/drivers.lazy').then((d) => d.Route))

const CustomersLazyRoute = CustomersLazyImport.update({
  path: '/customers',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/customers.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/customers': {
      id: '/customers'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof CustomersLazyImport
      parentRoute: typeof rootRoute
    }
    '/drivers': {
      id: '/drivers'
      path: '/drivers'
      fullPath: '/drivers'
      preLoaderRoute: typeof DriversLazyImport
      parentRoute: typeof rootRoute
    }
    '/routes': {
      id: '/routes'
      path: '/routes'
      fullPath: '/routes'
      preLoaderRoute: typeof RoutesLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/customers': typeof CustomersLazyRoute
  '/drivers': typeof DriversLazyRoute
  '/routes': typeof RoutesLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/customers': typeof CustomersLazyRoute
  '/drivers': typeof DriversLazyRoute
  '/routes': typeof RoutesLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/customers': typeof CustomersLazyRoute
  '/drivers': typeof DriversLazyRoute
  '/routes': typeof RoutesLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/customers' | '/drivers' | '/routes'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/customers' | '/drivers' | '/routes'
  id: '__root__' | '/' | '/customers' | '/drivers' | '/routes'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  CustomersLazyRoute: typeof CustomersLazyRoute
  DriversLazyRoute: typeof DriversLazyRoute
  RoutesLazyRoute: typeof RoutesLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  CustomersLazyRoute: CustomersLazyRoute,
  DriversLazyRoute: DriversLazyRoute,
  RoutesLazyRoute: RoutesLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/customers",
        "/drivers",
        "/routes"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/customers": {
      "filePath": "customers.lazy.tsx"
    },
    "/drivers": {
      "filePath": "drivers.lazy.tsx"
    },
    "/routes": {
      "filePath": "routes.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
